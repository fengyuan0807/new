"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import datetime
# from rest_framework.views import exception_handler

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
'''
__file__===>当前文件名dev.py
os.path.abspath()===>/home/python/Desktop/mifo_fron_and_back/meiduo_mall/meiduo_mall/settings/dev.py
os.path.dirname()===>/home/python/Desktop/mifo_fron_and_back/meiduo_mall/meiduo_mall/settings
os.path.dirname()===>/home/python/Desktop/mifo_fron_and_back/meiduo_mall/meiduo_mall
'''
# 查看项目导包路径
# print('sys.path:', sys.path)
# 指定应用的导包路径为meiduo_mall/apps
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# print('3', sys.path)
# /home/python/Desktop/project/meiduo_project/meiduo_mall
# users应用的所在目录：/home/python/Desktop/project/meiduo_project/meiduo_mall/meiduo_mall/apps/users
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g#udb4+_6^^7%8xua=*yw*h3vc*=t3#7j)y2%f13@e(xi=4xzy'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'www.meiduo.site',
    '127.0.0.1'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',  # 全文检索
    'django_crontab',  # 定时任务
    'rest_framework',
    'corsheaders',

    'users',
    'contents',
    'verifications',
    'oauth',
    'areas',
    'goods',
    'carts',
    'orders',
    'payment',
    'meiduo_admin',


]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mall.urls'

TEMPLATES = [
    {
        # 'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'environment': 'meiduo_mall.utils.jinja2_env.jinja2_environment'
        },
    },
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {  # 写（主机）
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'HOST': '192.168.182.128',  # 数据库主机
        # 'HOST': '127.0.0.1',  # 数据库主机
        'PORT': 3306,  # 数据库端口
        'USER': 'itheima',  # 数据库用户名
        'PASSWORD': '123456',  # 数据库用户密码
        'NAME': 'meiduo_mall'  # 数据库名字


    },
    'slave': {  # 读（从机）
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'HOST': '192.168.182.128',  # 数据库主机
        # 'HOST': '127.0.0.1',  # 数据库主机
        'PORT': 8306,  # 数据库端口
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'mysql',  # 数据库用户密码
        'NAME': 'meiduo_mall'  # 数据库名字

    },
}
CACHES = {
    "default": {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.182.128:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {  # session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.182.128:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": {  # verify_code
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.182.128:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": {  # history
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.182.128:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "carts": {  # carts
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.182.128:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# 3.设置redis存储django的session信息
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# print('STATICFILES_DIRS:', STATICFILES_DIRS)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            # 'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'handlers': ['console', ],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}
# 自定义的用户模型类：值的语法：'子应用。用户模型类'
AUTH_USER_MODEL = 'users.User'
# 指定自定义用户认证后端
AUTHENTICATION_BACKENDS = ['users.utils.UsernameMobileBackend']
# 判断用户是否登录，用户未登录的重定向的地址
LOGIN_URL = '/login/'

QQ_CLIENT_ID = '101518219'
QQ_CLIENT_SECRET = '418d84ebdc7241efb79536886ae95224'
QQ_REDIRECT_URI = 'http://www.meiduo.site:8000/oauth_callback'

EMAIL_VERIFY_URL = 'http://www.meiduo.site:8000/emails/verification/'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 指定邮件后端
EMAIL_HOST = 'smtp.163.com'  # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = 'a1104163640@163.com'  # 授权的邮箱
EMAIL_HOST_PASSWORD = '12345678aaa'  # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '美多商城<a1104163640@163.com>'  # 发件人抬头

DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.fdfs_storage.FdfsStorage'
# FastDFS相关参数
# FDFS_BASE_URL = 'http://192.168.182.128:8888/'
# fdfs的访问域名
# BASE_DIR: /home/python/Desktop/mifo_fron_and_back/meiduo_mall/meiduo_mall
FDFS_BASE_URL = 'http://image.meiduo.site:8888/'
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')
# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.182.128:9200/',  # Elasticsearch服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'meiduo_mall',  # Elasticsearch建立的索引库的名称

    },
}
# # 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 每页显示五条数据
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5
# 支付宝SDK配置参数
ALIPAY_APPID = '2016101100664045'
ALIPAY_DEBUG = True
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'
ALIPAY_RETURN_URL = 'http://www.meiduo.site:8000/payment/status/'
# jgisdd9164@sandbox.com

# 设置定时任务
CRONJOBS = [
    # 分 时 日 月 周
    ('*/1 * * * *', 'content.crons.generate_static_index_html',
     '>>' + os.path.join(os.path.dirname(BASE_DIR), 'logs/crontab.log'))
]  # filename 文件夹的名字
# print('1',os.path.join(os.path.dirname(BASE_DIR), 'logs/crontab.log'))
# print('2',os.path.join(BASE_DIR, 'logs/crontab.log'))
# 解决 crontab 中文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
# 数据库的路径
DATABASE_ROUTERS = ['meiduo_mall.utils.db_router.MasterSlaveDBRouter']


REST_FRAMEWORK = {
    # 指定DRF框架的异常处理函数
    'EXCEPTION_HANDLER': 'meiduo_admin.utils.exceptions.exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 引入JWT认证机制，当客户端将jwt token传递给服务器之后
        # 此认证机制会自动校验jwt token的有效性，无效会直接返回401(未认证错误)
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 指定分页类
    'DEFAULT_PAGINATION_CLASS': 'meiduo_admin.utils.pagination.StandardResultPagination',
}
# JWT扩展配置
JWT_AUTH = {
    # 设置生成jwt token的有效时间
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
}
# CORS跨域请求设置
CORS_ORIGIN_WHITELIST = (
    # 备注：允许源地址`http://127.0.0.1:8080`向当前API服务器发起跨域请求
    'http://127.0.0.1:8080',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie
